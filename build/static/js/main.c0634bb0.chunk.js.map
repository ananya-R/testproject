{"version":3,"sources":["components/customers.js","components/BranchManager.js","components/Administrators.js","App.js","serviceWorker.js","index.js"],"names":["Customer","state","branchData","data","ENDPOINT","current","pincode","showInvalidMessage","handleSubmit","event","preventDefault","contact","dt","Date","date","getDate","month","getMonth","dateString","getFullYear","customer","getHours","getMinutes","socket","socketIOClient","axios","post","then","res","console","log","length","setState","emit","inputValueHandler","target","name","value","this","Table","striped","bordered","hover","map","obj","i","key","Branch_Name","Address","City","Branch_Incharge","Contact_Number","className","onSubmit","type","onChange","id","React","Component","BranchManager","username","password","notifications_data","afterLogin","showInvalid","shownotifications","notifications_action_data","action","showNotifications","notificationAction","credentials","status","CData","reverse","on","Pincode","Pincode_Covered","includes","x","unshift","Button","variant","onClick","Administrator","App","Navbar","bg","Nav","Link","as","to","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c0634bb0.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport Table from 'react-bootstrap/Table';\r\nimport socketIOClient from 'socket.io-client'; \r\n\r\nclass Customer extends React.Component {\r\n  state = {\r\n    branchData: [],\r\n    data: false,\r\n    ENDPOINT: 'http://localhost:3010',\r\n    current: '',\r\n    pincode: '',\r\n    showInvalidMessage:false\r\n  };\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    const { contact, pincode } = this.state;\r\n    var dt=new Date();   \r\n    var date = dt.getDate();\r\n    var month = dt.getMonth();\r\n    var year = dt.getFullYear();\r\n    var dateString = year + \"-\" +(month + 1) + \"-\" + date;\r\n    const time=dt.getHours() + \":\"+dt.getMinutes()\r\n    const customer = {\r\n      contact,\r\n      pincode,\r\n    };\r\n    const socket = socketIOClient(this.state.ENDPOINT);\r\n    axios.post('/getData', customer).then((res) => {\r\n        console.log(res);\r\n    if(res.data.length==0){\r\n        this.setState({\r\n            showInvalidMessage:true\r\n        })\r\n        socket.emit('notification', {'customer':customer,'date':dateString});\r\n    }\r\n    else{\r\n        this.setState({\r\n            branchData: res.data,\r\n            data: true,\r\n          });\r\n            socket.emit('notification', {'customer':customer,'date':dateString});\r\n    }\r\n    });\r\n  };\r\n\r\n  inputValueHandler = (event) => {\r\n    event.preventDefault();\r\n    this.setState({\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { contact, pincode } = this.state;\r\n    if (!this.state.data) {\r\n      return (\r\n          <>\r\n        <div className='customer'>\r\n          <form onSubmit={this.handleSubmit}>\r\n            <label>\r\n              Contact Number\r\n              <input\r\n                type='text'\r\n                value={contact}\r\n                onChange={this.inputValueHandler}\r\n                name='contact'\r\n              />\r\n            </label>\r\n            <label id='pincode'>\r\n              Pincode\r\n              <input\r\n                type='text'\r\n                value={pincode}\r\n                onChange={this.inputValueHandler}\r\n                name='pincode'\r\n              />\r\n            </label>\r\n            <div className='submit'>\r\n              <input id='submit ' type='submit' value='SUBMIT' />\r\n            </div>\r\n          </form>\r\n        </div>\r\n        {this.state.showInvalidMessage ? (\r\n            <div className=\"\">\r\n              Bad Bad luck, No Donut for you!!\r\n            </div>\r\n          ) : null}\r\n        </>\r\n      );\r\n    } else if (this.state.data) {\r\n      return (\r\n        <div>\r\n          <Table striped bordered hover>\r\n          <thead>\r\n                <tr>\r\n                <th>Branch Name</th>\r\n                <th>Address</th>\r\n                <th>City</th>\r\n                <th>Branch Incharge</th>\r\n                <th>Contact Number</th> \r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n              {this.state.branchData.map((obj, i) => (\r\n                <tr key={i}>\r\n                    <td>{obj.Branch_Name}</td>\r\n                    <td>{obj.Address}</td>\r\n                    <td>{obj.City}</td>\r\n                    <td>{obj.Branch_Incharge}</td>\r\n                    <td>{obj.Contact_Number}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </Table>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default Customer;","import React from 'react';\r\nimport axios from 'axios';\r\nimport socketIOClient from 'socket.io-client';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nclass BranchManager extends React.Component{\r\n\r\n  state = {\r\n    ENDPOINT: 'http://localhost:3010',\r\n    username: '', \r\n    password: '',\r\n    notifications_data:[],\r\n    afterLogin:false,\r\n    showInvalid:false,\r\n    shownotifications:false,\r\n    notifications_action_data:{},\r\n    action:false\r\n  };\r\n  \r\n  showNotifications = () => {\r\n    this.setState({\r\n      shownotifications: true,\r\n    });\r\n  };\r\n\r\n  notificationAction = (obj) => {\r\n    this.setState({\r\n      notifications_action_data:obj,\r\n      action:true\r\n    })\r\n  }\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    const { username, password} = this.state;\r\n    const credentials = {\r\n      username,\r\n      password,\r\n    };\r\n    axios.post('/verify', credentials).then((res) => {\r\n      if(res.data[0].status=='Success'){ \r\n        this.setState({\r\n          notifications_data:res.data[0].CData.reverse(),\r\n          afterLogin:true\r\n        })\r\n        const socket = socketIOClient(this.state.ENDPOINT);\r\n        socket.on('message', data => { \r\n        if(data[0].pincode==res.data[0].Pincode || res.data[0].Pincode_Covered.includes(data.pincode)){\r\n          let x=this.state.notifications_data;\r\n          x.unshift(data[0]);\r\n          this.setState({           \r\n            notifications_data:x\r\n         });\r\n        }\r\n      });\r\n      }\r\n      else{\r\n        this.setState({\r\n          afterLogin:false,\r\n          showInvalid:true,\r\n        })\r\n      }\r\n    });\r\n  };\r\n\r\n  inputValueHandler = (event) => {\r\n    event.preventDefault();\r\n    this.setState({\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n      render(){\r\n        const { username,password } = this.state;\r\n        if(!this.state.afterLogin){\r\n          return(\r\n            <>\r\n            <div className=\"BranchManager\">\r\n                <form onSubmit={this.handleSubmit}>\r\n                            <label>Username<input\r\n                            type='text'\r\n                            value={username}\r\n                            onChange={this.inputValueHandler}\r\n                            name='username'\r\n                            /></label>\r\n                             <label id=\"password\">Password<input\r\n                            type='password'\r\n                            value={password}\r\n                            onChange={this.inputValueHandler}\r\n                            name='password'\r\n                            /></label>\r\n                             <div className=\"submit\">\r\n                            <input id=\"submit \" type=\"submit\" value=\"SUBMIT\" />\r\n                            </div>\r\n                        </form>\r\n            </div>\r\n            {this.state.showInvalid ? (\r\n            <div className=\"\">\r\n              Invalid Credentials! Please try again.\r\n            </div>\r\n          ) : null}\r\n            </>\r\n            );\r\n        }\r\n        else if(this.state.afterLogin){\r\n          return(\r\n            <>\r\n          <div className='mainBranch'>\r\n            <h3>Hi Branch Manager</h3>\r\n            <div className='notifications'><Button\r\n              variant='primary'\r\n              onClick={this.showNotifications}\r\n            >\r\n              Notifications\r\n            </Button></div>\r\n          </div>\r\n          {this.state.shownotifications ? (\r\n            <div className=\"notifications notificationsmain\">\r\n              {this.state.notifications_data.map((obj, i) => {\r\n                return <li className=\"notificationsList\" onClick={() => this.notificationAction(obj)} key={i}>A customer was searching for your branch on {obj.date}.You can contact him in this number-{obj.contact}</li>;\r\n              })}\r\n            </div>\r\n          ) : null}\r\n           {this.state.action ? (\r\n            <div className=\"notificationaction\">\r\n              You can call the customer in the given number and provide more details.\r\n            </div>\r\n          ) : null}\r\n        </>\r\n          );\r\n          \r\n        }\r\n        \r\n      }\r\n}\r\n\r\nexport default BranchManager","import React from 'react';\r\nimport axios from 'axios';\r\nimport socketIOClient from 'socket.io-client';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nclass Administrator extends React.Component{\r\n\r\n  state = {\r\n    ENDPOINT: 'http://localhost:3010',\r\n    username: '', \r\n    password: '',\r\n    notifications_data:[],\r\n    afterLogin:false,\r\n    showInvalid:false,\r\n    shownotifications:false\r\n  };\r\n  \r\n  showNotifications = () => {\r\n    this.setState({\r\n      shownotifications: true,\r\n    });\r\n  };\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    const { username, password} = this.state;\r\n    const credentials = {\r\n      username,\r\n      password,\r\n    };\r\n\r\n    axios.post('/admin',credentials).then( (res) => {\r\n      if(res.data[0].status=='Success'){\r\n        this.setState({\r\n          notifications_data:res.data[0].CData.reverse(),\r\n          afterLogin:true\r\n        })\r\n        const socket = socketIOClient(this.state.ENDPOINT);\r\n        console.log(socket);\r\n        socket.on('message', data => { \r\n                let x=this.state.notifications_data;\r\n                x.unshift(data[0]);\r\n                this.setState({           \r\n                   notifications_data:x,\r\n                });\r\n            });\r\n      }\r\n         else{\r\n        this.setState({\r\n          afterLogin:false,\r\n          showInvalid:true,\r\n        })\r\n      }\r\n    })\r\n  };\r\n\r\n  inputValueHandler = (event) => {\r\n    event.preventDefault();\r\n    this.setState({\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n      render(){\r\n        const { username,password } = this.state;\r\n        if(!this.state.afterLogin){\r\n          return(\r\n            <>\r\n            <div className=\"BranchManager\">\r\n                <form onSubmit={this.handleSubmit}>\r\n                            <label>Username<input\r\n                            type='text'\r\n                            value={username}\r\n                            onChange={this.inputValueHandler}\r\n                            name='username'\r\n                            /></label>\r\n                             <label id=\"password\">Password<input\r\n                            type='password'\r\n                            value={password}\r\n                            onChange={this.inputValueHandler}\r\n                            name='password'\r\n                            /></label>\r\n                             <div className=\"submit\">\r\n                            <input id=\"submit \" type=\"submit\" value=\"SUBMIT\" />\r\n                            </div>\r\n                        </form>\r\n            </div>\r\n            {this.state.showInvalid ? (\r\n            <div className=\"\">\r\n              Invalid Credentials! Please try again.\r\n            </div>\r\n          ) : null}\r\n            </>\r\n            );\r\n        }\r\n        else if(this.state.afterLogin){\r\n          return(\r\n            <>\r\n          <div className='mainBranch'>\r\n            <h3>Hi Administrator</h3>\r\n            <div className='notifications'><Button\r\n              variant='primary'\r\n              onClick={this.showNotifications}\r\n            >\r\n              Notifications\r\n            </Button></div>\r\n          </div>\r\n          {this.state.shownotifications ? (\r\n            <div className=\"notifications notificationsmain\">\r\n              {this.state.notifications_data.map((obj, i) => {\r\n                return <li className=\"notificationsList\" key={i}>A customer was searching for a branch in {obj.pincode} on {obj.date}.You can contact him in this number-{obj.contact}</li>;\r\n              })}\r\n            </div>\r\n          ) : null}\r\n        </>\r\n          );\r\n          \r\n        }\r\n        \r\n      }\r\n}\r\n\r\nexport default Administrator","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport {Link,Route} from 'react-router-dom';\nimport Customer from './components/customers';\nimport BranchManager from './components/BranchManager';\nimport Administrator from './components/Administrators';\nimport {Nav, Navbar, NavItem} from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Navbar bg=\"primary\" variant=\"dark\">\n    <Nav className=\"mr-auto\">\n      <Nav.Link as={Link} to=\"/customers\">Customers</Nav.Link>\n      <Nav.Link as={Link} to=\"/branchmanager\">Branch Managers</Nav.Link>\n      <Nav.Link as={Link} to=\"/administrator\">Administrators</Nav.Link>\n    </Nav>\n  </Navbar>\n     {/* <ul className=\"ul\">\n     <li><Link to=\"/customers\">Customers</Link></li>\n     <li><Link to=\"/branchmanager\">Branch Managers</Link></li>\n     <li>Administrators</li>\n     </ul> */}\n\n     <Route path=\"/customers\" component={Customer}></Route>\n     <Route path=\"/branchmanager\" component={BranchManager}></Route>\n     <Route path=\"/administrator\" component={Administrator}></Route>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter} from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}